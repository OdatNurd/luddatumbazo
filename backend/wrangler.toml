name = "luddatumbazo-api"
main = "src/luddatumbazo.js"
compatibility_date = "2023-12-01"

# Dev versions should have no route; production versions go directly to our
# customized route instead.
#
# Here the zone_id comes from the API section of the overview page of a site in
# the CF Dashboard.
workers_dev = false
route = { pattern = "luddatumbazo.odatnurd.net/api/*", zone_id="228f86abc5bc8b04719dc4671eb09dc0" }

# For CF Images setup, set up an account and make a note of your account hash,
# which is readily visible in the images dashboard. Then, set up a page rewrite
# rule to get at the images for the assigned domain more directly:
#
#  1. Log into the CF dash and navigate to the website you want to serve from
#  2. Select Rules > Transform Rules and pick Create Rule; give it a name
#  3. Choose 'Custom Expression', click the Edit Expression Link
#     - Expression: (http.request.uri.path matches "^/images/.*$")
#  4. Choose 'Then > Rewrite To > Dynamic' and edit the expression
#     - concat( "/cdn-cgi/imagedelivery/Dx4jrYPNAcY0IcNpYD9HJA", substring(http.request.uri.path, 7) )
#
# In #4, the dx4jr bit is your account hash; that is available in CF Images
#
# Images are now available under:
#   https://luddatumbazo.odatnurd.net/images/<IMAGEID>/<VARIANT-NAME>
#   https://luddatumbazo.odatnurd.net/cdn-cgi/imagedelivery/Dx4jrYPNAcY0IcNpYD9HJA/<IMAGEID>/<VARIANT-NAME>
#   https://imagedelivery.net/Dx4jrYPNAcY0IcNpYD9HJA/<IMAGEID>/<VARIANT-NAME>
#
# The first two of these are gated behind any IAM on the main application
# domain, but the third is always public unless the image is not public (in
# which case the request will require a key to be provided; the app currently
# makes all images public however).

# Bind our database; the name and ID come from the D1 page and are visible when
# you create DB or go back to look at one.
[[d1_databases]]
binding = "DB"
database_name = "luddatumbazo-db"
database_id = "12c1daa5-0e78-4a83-ae4e-6785dd098005"

# Bind our data bucket; the name is specified by you when you create the bucket
# initially.
[[r2_buckets]]
binding = "BUCKET"
bucket_name = "luddatumbazo-assets"

[vars]

################################################################################
# G E N E R A L
################################################################################

# The Account ID of the CF account that is running the worker; this is visible
# from the same place as the zone_id for the worker router; it's specific to an
# account and not a domain.
#
# This is used in all requests to the Cloudflare API, which requires as a path
# parameter the account ID of the account the API is being invoked for.
CF_ACCOUNT_ID = 'd8cc4339c920f6d32079a5b483603063'

# This is actually for the UI and not for the worker, but this is here as a
# reminder that it should be set for the UI build.
#
# It specifies the full URI to the API that this worker runs at and it used at
# build time to tell the UI code where it should talk to.
#
# See client/.env.template for a template you can copy to a .env file to set
# this up.
# GAME_API_ROOT_URI = http://localhost:8000

# The frontend code needs to access us as the API, but it may be running on a
# different hostname than we are (particulary during development). This sets
# what the CORS origin header is set to, indicating what hosts are allowed to
# talk to us.
#
# The default value here only works for cases where the Worker and the Pages
# sites are both at the same origin (e.g. production); for localhost, this needs
# to be overridden in .dev.vars instead.
GAME_UI_ORIGIN = '*'


################################################################################
# A U T H E N T I C A T I O N
################################################################################

# When you set up Cloudflare Access, you set up a team name; your application
# portal is then rooted at that domain.
#
# The domain is used to mark the issuer of the authentication JWT, and the
# incoming JWT is validated to be issued by this domain.
CF_TEAM_DOMAIN = 'https://odatnurd.cloudflareaccess.com'

# All CLoudflare Access accounts have a JWKS that is used to provide the public
# keys needs to validate that the incoming JWT is authentic.
#
# This is always the team domain with a specific suburl attached to the end,
# which is common to all accounts.
CF_TEAM_JWKS = 'https://odatnurd.cloudflareaccess.com/cdn-cgi/access/certs'

# The Audience Tag for the application, which comes from the Overview tab of the
# Application in Cloudflare Access.
#
# This is used in the JWT to mark the audience that the token is for, and like
# the team domain above the JWT is validated to be directed at this audience.
CF_AUD_TAG = 'b8cb09d687d967fbd2d5541b0fa8502dffe66532eb8a4d964834a04e389347fc'

# The production version of the API supports being accessed remotely via test or
# command line tools via a configured service token.
#
# The values here specify the clientID of the service token that should have
# access, what the uuid of the internal user (which must be previously known to
# the system) to map it to.
#
# The authorization code uses the two of them to validate that the token is the
# expected one, and to mock the actual user that underlies the token.
CF_SERVICE_CLIENTID = '9a23b214dd414ae8f91105343fd4f4b7.access'
CF_SERVICE_USER = 'be916285-a022-5a5f-8006-82bd2e6b097d'

# Authentication in the application requires that all requests that require auth
# contain a a JWT whose claims contain the details of the user. The code uses
# the keys in the above JWKS to validate the token.
#
# If this value is set (which should **NEVER** happen in a real deployment), the
# token is decoded but not validated. This allows local code to work with a
# structurally intact token without requiring it to be signed. The value of the
# variable is inconsequential; just being set to anything is an indication of
# development mode.
#
# This should only ever be set in the .dev.vars file.
#CF_DEV_MODE = 'true'


################################################################################
# I M A G E S
################################################################################

# When generating URLs for Cloudflare images, this is the template that is used
# to inject the internal image path and the name of the variant in order to
# arrive at the final image URL delivered to the browser.
#
# See the Images section above; this can be set to the secured domain or to the
# public one. In this URL, the imagePath is the imageId of the image.
#
# You may want to override this value in the .dev.vars file to point to the
# public version of the URL so that the development version's UI can display
# images without you having to log into the deployed production application
# first.
CF_IMAGEURL_TEMPLATE = 'https://luddatumbazo.odatnurd.net/images/{imagePath}/{variant}'

# Cloudflare images provides you the ability to have one or more variants, but
# they are not namespaced to a particular project.
#
# This values are used to make our internal names for the image sizes we want
# (whose names are visible in the CF_VARIANT names) to the actual variant name.
#
# For example, a request for a 'boxart' image consults CF_VARIANT_BOXART and
# determines that the variant name to use is 'cover'.
CF_VARIANT_THUMB = 'thumb'
CF_VARIANT_BOXART = 'cover'
CF_VARIANT_SMALLBOXART = 'entry'


################################################################################
# T O K E N S
################################################################################

# In order to access the Cloudflare Images API, a token is needed with claims:
#    "Cloudflare Images: Read"
#    "Cloudflare Images: Edit"
#    "Account Analytics: Read"
#
# This is used in requests to upload images as well as to gather data about
# images being served and such.
#
# This value should *NEVER* be set here; set it via the dashboard and encrypt
# it. This is just here as a reminder that the variable needs to exist,
# including in the .dev.vars file (if you want local code to work).
#CF_IMAGES_TOKEN=secrettokenhere

# In order to access information about the currently logged in user, a token
# is needed with claims:
#     "Access: Audit Logs"
#
# This is used when an authorization request is made but the UUID of the user
# does not exist in the database; we can reach out with to the API to determine
# session details and get the information that we need in order to automatically
# add the new user to the system.
#
# This value should *NEVER* be set here; set it via the dashboard and encrypt
# it. This is just here as a reminder that the variable needs to exist,
# including in the .dev.vars file (if you want local code to work).
# CF_ACCESS_TOKEN = 'putsecrettokenhere'


# Local dev server settings
[dev]
ip = "localhost"
port = 8000
